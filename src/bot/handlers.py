import asyncio
import logging
import re

from aiogram import F, Router
from aiogram.filters import (
    Command,
    CommandObject,
    CommandStart,
    StateFilter,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from aiogram.utils.markdown import hcode

from src.api.xui_api import XUIApi
from src.bot.callbacks import ProfileCallback
from src.bot.keyboards import get_profiles_markup
from src.bot.states import ProfileCreation
from src.core.config import settings

router = Router()


def parse_args_with_limits(args: list[str]) -> dict:
    remark_parts = []
    limit = 0
    days = 0
    for part in args:
        if match := re.match(r"limit=(\d+)", part, re.IGNORECASE):
            limit = int(match.group(1))
        elif match := re.match(r"days=(\d+)", part, re.IGNORECASE):
            days = int(match.group(1))
        else:
            remark_parts.append(part)
    return {"remark": " ".join(remark_parts), "limit": limit, "days": days}


async def create_proxy_profile(
    message: Message,
    host: str,
    port: str,
    user: str,
    password: str,
    remark: str,
    limit: int,
    days: int,
):
    api = XUIApi(settings.PANEL_URL, settings.PANEL_LOGIN, settings.PANEL_PASSWORD)
    api.login()

    sanitized_remark = remark.lower().replace(" ", "-").replace(":", "-")
    if api.is_profile_exists(sanitized_remark, settings.VLESS_INBOUND_ID):
        await message.answer(f"‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å —Å –∏–º–µ–Ω–µ–º '{remark}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>")
        return

    msg = await message.answer("–ò–º—è —Å–≤–æ–±–æ–¥–Ω–æ. –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É... ‚è≥")
    try:
        await msg.edit_text("–®–∞–≥ 1/5: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–±–∞—É–Ω–¥–∞...")
        inbound_info = api.get_inbound(settings.VLESS_INBOUND_ID)

        outbound_tag = f"out-{sanitized_remark[:20]}"
        await msg.edit_text(f"–®–∞–≥ 2/5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–±–∞—É–Ω–¥–∞ (—Ç–µ–≥: {outbound_tag})...")
        api.add_outbound(outbound_tag, host, port, user, password)

        client_remark = f"user-{sanitized_remark[:20]}"
        await msg.edit_text(
            f"–®–∞–≥ 3/5: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: {client_remark})..."
        )
        new_uuid = api.add_client_to_inbound(
            settings.VLESS_INBOUND_ID, client_remark, total_gb=limit, expiry_days=days
        )

        await msg.edit_text("–®–∞–≥ 4/5: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...")
        api.add_routing_rule(client_remark, outbound_tag, settings.VLESS_INBOUND_ID)

        await msg.edit_text("–®–∞–≥ 5/5: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Xray –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏...")
        api.restart_xray()
        await asyncio.sleep(3)

        vless_uri = api.get_vless_uri(
            settings.VLESS_INBOUND_ID, new_uuid, remark, inbound_data=inbound_info
        )

        await msg.delete()
        await message.answer(
            f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ—Ñ–∏–ª—å '{remark}' —Å–æ–∑–¥–∞–Ω.</b>\n\n"
            f"–õ–∏–º–∏—Ç—ã: {limit or '‚àû'} –ì–ë, {days or '‚àû'} –¥–Ω–µ–π.\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n"
            f"{hcode(vless_uri)}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏-–ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await msg.edit_text(f"‚ùå <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.</b>\n\n<b>–û—à–∏–±–∫–∞:</b> {e}")


async def create_direct_vless_profile(
    message: Message, remark: str, limit: int, days: int
):
    api = XUIApi(settings.PANEL_URL, settings.PANEL_LOGIN, settings.PANEL_PASSWORD)
    api.login()

    sanitized_remark = remark.lower().replace(" ", "-").replace(":", "-")
    if api.is_profile_exists(sanitized_remark, settings.VLESS_INBOUND_ID):
        await message.answer(f"‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å —Å –∏–º–µ–Ω–µ–º '{remark}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>")
        return

    msg = await message.answer("–ò–º—è —Å–≤–æ–±–æ–¥–Ω–æ. –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É... ‚è≥")
    try:
        await msg.edit_text("–®–∞–≥ 1/4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–±–∞—É–Ω–¥–∞...")
        inbound_info = api.get_inbound(settings.VLESS_INBOUND_ID)

        client_remark = f"user-{sanitized_remark[:20]}"
        await msg.edit_text(
            f"–®–∞–≥ 2/4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: {client_remark})..."
        )
        new_uuid = api.add_client_to_inbound(
            settings.VLESS_INBOUND_ID,
            client_remark,
            total_gb=limit,
            expiry_days=days,
            flow="xtls-rprx-vision-udp443",
        )

        await msg.edit_text("–®–∞–≥ 3/4: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ (–Ω–∞ 'direct')...")
        api.add_routing_rule(client_remark, "direct", settings.VLESS_INBOUND_ID)

        await msg.edit_text("–®–∞–≥ 4/4: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Xray –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏...")
        api.restart_xray()
        await asyncio.sleep(3)

        vless_uri = api.get_vless_uri(
            settings.VLESS_INBOUND_ID, new_uuid, remark, inbound_data=inbound_info
        )

        await msg.delete()
        await message.answer(
            f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ! '–ß–∏—Å—Ç—ã–π' VLESS –ø—Ä–æ—Ñ–∏–ª—å '{remark}' —Å–æ–∑–¥–∞–Ω.</b>\n\n"
            f"–õ–∏–º–∏—Ç—ã: {limit or '‚àû'} –ì–ë, {days or '‚àû'} –¥–Ω–µ–π.\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n"
            f"{hcode(vless_uri)}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VLESS-–ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await msg.edit_text(f"‚ùå <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.</b>\n\n<b>–û—à–∏–±–∫–∞:</b> {e}")


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏-–ø—Ä–æ—Ñ–∏–ª—è–º–∏.\n\n"
        "‚ñ™Ô∏è /new <code>host:port:user:pass –ù–∞–∑–≤–∞–Ω–∏–µ [limit=–ì–ë] [days=–î–ù–ï–ô]</code> - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏\n"
        "‚ñ™Ô∏è /vless <code>–ù–∞–∑–≤–∞–Ω–∏–µ [limit=–ì–ë] [days=–î–ù–ï–ô]</code> - —Å–æ–∑–¥–∞—Ç—å '—á–∏—Å—Ç—ã–π' VLESS –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚ñ™Ô∏è /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
        "‚ñ™Ô∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )


@router.message(Command("cancel"), StateFilter(any_state))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.message(Command("new"))
async def cmd_new(message: Message, state: FSMContext, command: CommandObject):
    await state.clear()
    if not command.args:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b> <code>host:port:user:pass –ù–∞–∑–≤–∞–Ω–∏–µ [limit=–ì–ë] [days=–î–ù–ï–ô]</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n<code>proxy.example.com:1234:john:secret123 –ü—Ä–æ–∫—Å–∏1 limit=50 days=30</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
        await state.set_state(ProfileCreation.waiting_for_proxy_details)
        return
    try:
        parts = command.args.split()
        if len(parts) < 2:
            raise ValueError(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
        proxy_data_str = parts[0]
        parsed_args = parse_args_with_limits(parts[1:])
        remark = parsed_args["remark"]
        if not remark:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        host, port, user, password = proxy_data_str.split(":")
        await create_proxy_profile(
            message,
            host,
            port,
            user,
            password,
            remark,
            parsed_args["limit"],
            parsed_args["days"],
        )
    except (ValueError, IndexError) as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö:</b> {e}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/new host:port:user:pass –ù–∞–∑–≤–∞–Ω–∏–µ [limit=–ì–ë] [days=–î–ù–ï–ô]</code>"
        )


@router.message(
    ProfileCreation.waiting_for_proxy_details, F.text, ~F.text.startswith("/")
)
async def process_proxy_details_fsm(message: Message, state: FSMContext):
    command = CommandObject(prefix="/", command="new", args=message.text)
    await cmd_new(message, state, command)


@router.message(Command("vless"))
async def cmd_vless(message: Message, command: CommandObject, state: FSMContext):
    await state.clear()
    if not command.args:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ VLESS –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b> <code>/vless –ù–∞–∑–≤–∞–Ω–∏–µ [limit=–ì–ë] [days=–î–ù–ï–ô]</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n<code>/vless –ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω limit=10</code>"
        )
        return
    parsed_args = parse_args_with_limits(command.args.split())
    remark = parsed_args["remark"]
    if not remark:
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    await create_direct_vless_profile(
        message, remark, parsed_args["limit"], parsed_args["days"]
    )


@router.message(Command("list"))
async def cmd_list(message: Message, state: FSMContext):
    await state.clear()
    text, markup = await get_profiles_markup()
    await message.answer(text, reply_markup=markup)


@router.callback_query(ProfileCallback.filter(F.action == "list"))
async def cq_list_page(query: CallbackQuery, callback_data: ProfileCallback):
    text, markup = await get_profiles_markup(page=callback_data.page)
    await query.message.edit_text(text, reply_markup=markup)
    await query.answer()


@router.callback_query(ProfileCallback.filter(F.action == "confirm_delete"))
async def cq_confirm_delete(query: CallbackQuery, callback_data: ProfileCallback):
    remark = callback_data.profile_id.replace("-", " ")
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ÄºÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=ProfileCallback(
                        action="execute_delete", profile_id=callback_data.profile_id
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞",
                    callback_data=ProfileCallback(
                        action="list", page=callback_data.page
                    ).pack(),
                ),
            ]
        ]
    )
    await query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å <b>{remark.capitalize()}</b>?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=markup,
    )
    await query.answer()


@router.callback_query(ProfileCallback.filter(F.action == "execute_delete"))
async def cq_execute_delete(query: CallbackQuery, callback_data: ProfileCallback):
    await query.message.edit_text("–£–¥–∞–ª—è—é –ø—Ä–æ—Ñ–∏–ª—å... ‚è≥")
    try:
        api = XUIApi(settings.PANEL_URL, settings.PANEL_LOGIN, settings.PANEL_PASSWORD)
        api.login()

        profiles = api.get_profiles(settings.VLESS_INBOUND_ID)
        profile_to_delete = next(
            (p for p in profiles if p["profile_id"] == callback_data.profile_id), None
        )

        if not profile_to_delete:
            raise ValueError("–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        api.delete_profile(
            profile_to_delete["client_remark"],
            profile_to_delete["outbound_tag"],
            settings.VLESS_INBOUND_ID,
        )
        api.restart_xray()

        remark = callback_data.profile_id.replace("-", " ")
        await query.answer(f"–ü—Ä–æ—Ñ–∏–ª—å {remark.capitalize()} —É–¥–∞–ª–µ–Ω!", show_alert=True)

        text, markup = await get_profiles_markup(page=0)
        await query.message.edit_text(text, reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", exc_info=True)
        await query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n–û—à–∏–±–∫–∞: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
